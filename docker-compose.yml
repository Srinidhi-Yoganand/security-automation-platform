version: '3.8'

# ==============================================================================
# SECURITY AUTOMATION PLATFORM - Production Deployment
# ==============================================================================
# Pre-built Docker images from Docker Hub - no source code needed!
#
# Quick Start:
#   1. docker-compose up -d
#   2. Access dashboard: http://localhost:8000/api/v1/e2e/dashboard
#   3. API docs: http://localhost:8000/docs
#
# Scan your app:
#   curl -X POST http://localhost:8000/api/v1/e2e/analyze-and-fix-with-pr \
#     -H "Content-Type: application/json" \
#     -d '{"source_path": "/path/to/your/app", "language": "java"}'
# ==============================================================================

services:
  # Ollama LLM Service - AI-powered patch generation
  ollama:
    image: ollama/ollama:latest
    container_name: security-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    networks:
      - security-network
    deploy:
      resources:
        limits:
          memory: 12G
        reservations:
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Security Automation Platform - Main Service
  correlation-engine:
    build:
      context: .
      dockerfile: Dockerfile
    image: security-automation-platform:local
    container_name: security-correlation-engine
    environment:
      # LLM Configuration
      - OLLAMA_HOST=http://ollama:11434
      - LLM_PROVIDER=${LLM_PROVIDER:-ollama}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-deepseek-coder:6.7b-instruct}
      
      # Alternative LLM Providers (optional)
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Database
      - DATABASE_URL=sqlite:///./data/security.db
      
      # GitHub Integration (for PR creation)
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_REPO=${GITHUB_REPO:-}
      
      # DAST Configuration
      - ZAP_HOST=http://zap:8090
      
      # SAST Configuration  
      - SONARQUBE_HOST=http://sonarqube:9000
      - SONARQUBE_TOKEN=${SONARQUBE_TOKEN:-squ_default_token}
      
      # CPG Analysis Configuration (replaces IAST)
      - CPG_ENABLED=true
      - JOERN_HOME=/opt/joern
      - CODEQL_HOME=/opt/codeql
      
      # Target Application (set by override files)
      - TARGET_APP_NAME=${TARGET_APP_NAME:-}
      - TARGET_APP_URL=${TARGET_APP_URL:-}
      - TARGET_APP_LANGUAGE=${TARGET_APP_LANGUAGE:-}
      - TARGET_APP_SOURCE=${TARGET_APP_SOURCE:-/target-app}
      
      # Notifications (optional)
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM=${SMTP_FROM:-}
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL:-}
    
    depends_on:
      # ollama:
      #   condition: service_healthy
      zap:
        condition: service_healthy
      # sonarqube:
      #   condition: service_healthy
    
    ports:
      - "8000:8000"
    
    volumes:
      # Target application source (mounted by override files)
      # Use docker-compose.custom-app.yml or docker-compose.dvwa.yml
      
      # Data persistence (databases, scan results, patches)
      - correlation_data:/app/data
      
      # CodeQL databases cache
      - codeql_data:/app/codeql-databases
      
      # Mount source code for development (hot reload)
      - ./correlation-engine/app:/app/app:ro
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - security-network

  # OWASP ZAP - Dynamic Application Security Testing (DAST)
  zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    container_name: security-zap
    ports:
      - "8090:8090"
    command: zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true
    restart: unless-stopped
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # SonarQube - Code Quality and Security Analysis (OPTIONAL - Memory Intensive)
  # Uncomment if you have 12+ GB RAM available
  # sonarqube:
  #   image: sonarqube:10-community
  #   container_name: security-sonarqube
  #   environment:
  #     - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - sonarqube_data:/opt/sonarqube/data
  #     - sonarqube_extensions:/opt/sonarqube/extensions
  #     - sonarqube_logs:/opt/sonarqube/logs
  #   restart: unless-stopped
  #   networks:
  #     - security-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 120s
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 4G
  #       reservations:
  #         memory: 2G

  # ============================================
  # TARGET APPLICATION
  # ============================================
  # Target application is defined in override files:
  # - docker-compose.custom-app.yml (custom vulnerable app)
  # - docker-compose.dvwa.yml (DVWA)
  # - Create your own docker-compose.myapp.yml
  #
  # Usage:
  #   docker-compose -f docker-compose.yml -f docker-compose.custom-app.yml up
  #   docker-compose -f docker-compose.yml -f docker-compose.dvwa.yml up

volumes:
  ollama_data:
    name: security-ollama-models
    driver: local
  
  correlation_data:
    name: security-correlation-data
    driver: local
  
  codeql_data:
    name: security-codeql-cache
    driver: local
  
  sonarqube_data:
    name: security-sonarqube-data
    driver: local
  
  sonarqube_extensions:
    name: security-sonarqube-extensions
    driver: local
  
  sonarqube_logs:
    name: security-sonarqube-logs
    driver: local

networks:
  security-network:
    name: security-automation-network
    driver: bridge
