name: Security Automation Platform - Pluggable Scanner

on:
  workflow_dispatch:
    inputs:
      target_repository:
        description: 'Target repository to scan (owner/repo)'
        required: false
        default: ''
      target_ref:
        description: 'Branch/tag/commit to scan'
        required: false
        default: 'main'
      auto_apply_patches:
        description: 'Automatically apply patches and create PR'
        required: false
        default: true
        type: boolean
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  OLLAMA_HOST: http://localhost:11434

jobs:
  # Job 1: Checkout target application
  checkout-target:
    name: Checkout Target Application
    runs-on: ubuntu-latest
    outputs:
      target_path: ${{ steps.setup.outputs.target_path }}
      target_repo: ${{ steps.setup.outputs.target_repo }}
    steps:
    - name: Checkout correlation engine (this repo)
      uses: actions/checkout@v4
      with:
        path: correlation-engine-repo
        
    - name: Setup target application
      id: setup
      run: |
        # If target_repository is provided, clone it
        # Otherwise, use the correlation-engine repo itself (for testing)
        if [ -n "${{ github.event.inputs.target_repository }}" ]; then
          echo "üéØ Scanning external repository: ${{ github.event.inputs.target_repository }}"
          git clone --depth 1 --branch "${{ github.event.inputs.target_ref || 'main' }}" \
            "https://github.com/${{ github.event.inputs.target_repository }}.git" target-app
          echo "target_path=target-app" >> $GITHUB_OUTPUT
          echo "target_repo=${{ github.event.inputs.target_repository }}" >> $GITHUB_OUTPUT
        else
          echo "üéØ Scanning current repository (test mode)"
          echo "target_path=correlation-engine-repo" >> $GITHUB_OUTPUT
          echo "target_repo=${{ github.repository }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload target application
      uses: actions/upload-artifact@v4
      with:
        name: target-app
        path: ${{ steps.setup.outputs.target_path }}
        retention-days: 1

  # Job 2: Run security scans
  security-scan:
    name: Run Security Scans
    runs-on: ubuntu-latest
    needs: checkout-target
    steps:
    - name: Download target application
      uses: actions/download-artifact@v4
      with:
        name: target-app
        path: ./target-app
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Run Semgrep SAST
      run: |
        pip install semgrep
        semgrep --config p/security-audit \
                --config p/java \
                --config p/owasp-top-ten \
                --sarif --output semgrep-results.sarif \
                ./target-app
        
    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: scan-results
        path: semgrep-results.sarif
        retention-days: 7

  # Job 3: Generate AI patches
  generate-patches:
    name: Generate AI-Powered Patches
    runs-on: ubuntu-latest
    needs: [checkout-target, security-scan]
    
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "ollama list || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout correlation engine
      uses: actions/checkout@v4
      with:
        path: correlation-engine
        
    - name: Download target application
      uses: actions/download-artifact@v4
      with:
        name: target-app
        path: ./target-app
        
    - name: Download scan results
      uses: actions/download-artifact@v4
      with:
        name: scan-results
        path: ./scan-results
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        cd correlation-engine/correlation-engine
        pip install -r requirements.txt
        
    - name: Setup Ollama model
      run: |
        # Pull DeepSeek Coder model
        docker exec ${{ job.services.ollama.id }} ollama pull deepseek-coder:6.7b-instruct
        docker exec ${{ job.services.ollama.id }} ollama list
        
    - name: Generate patches
      env:
        OLLAMA_HOST: http://localhost:11434
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cd correlation-engine/correlation-engine
        python generate_patches.py
        
    - name: Upload patches
      uses: actions/upload-artifact@v4
      with:
        name: ai-patches
        path: patches.json
        retention-days: 30

  # Job 4: Test patches and create PR
  test-and-create-pr:
    name: Test Patches & Create PR
    runs-on: ubuntu-latest
    needs: [checkout-target, generate-patches]
    if: github.event.inputs.auto_apply_patches == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ needs.checkout-target.outputs.target_repo }}
        ref: ${{ github.event.inputs.target_ref || 'main' }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Download patches
      uses: actions/download-artifact@v4
      with:
        name: ai-patches
        path: ./
        
    - name: Download scan results (before)
      uses: actions/download-artifact@v4
      with:
        name: scan-results
        path: ./scan-results-before
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Create patch branch
      run: |
        git config user.name "Security Bot"
        git config user.email "security-bot@github.com"
        
        BRANCH_NAME="security-patches-$(date +%Y%m%d-%H%M%S)"
        echo "PATCH_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
        
        git checkout -b $BRANCH_NAME
        
    - name: Apply patches
      run: |
        python ../correlation-engine/correlation-engine/apply_patches.py
        
    - name: Commit patches
      run: |
        git add -A
        git commit -m "Apply AI security patches - run ${{ github.run_id }}" || echo "No changes"
        
    - name: Run security scan on patched code
      run: |
        pip install semgrep
        semgrep --config p/security-audit \
                --config p/java \
                --config p/owasp-top-ten \
                --sarif --output scan-results-after.sarif \
                . || true
        
    - name: Compare results
      id: compare
      run: |
        cd ..
        python correlation-engine/correlation-engine/compare_results.py || true
        
    - name: Push patch branch
      run: |
        git push origin ${{ env.PATCH_BRANCH }}
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.PATCH_BRANCH }}
        base: ${{ github.event.inputs.target_ref || 'main' }}
        title: "üîí Automated Security Patches - ${{ github.run_id }}"
        body: |
          ## ü§ñ AI-Generated Security Patches
          
          This PR contains automatically generated security patches from the **Security Automation Platform**.
          
          ### üìä Results
          
          - **Vulnerabilities Before:** ${{ steps.compare.outputs.before_count }}
          - **Vulnerabilities After:** ${{ steps.compare.outputs.after_count }}
          - **Improvement:** ${{ steps.compare.outputs.improvement }} vulnerabilities fixed (${{ steps.compare.outputs.percentage }}%)
          
          ### üîç What was patched?
          
          The AI analyzed the codebase and generated patches for:
          - SQL Injection vulnerabilities
          - XSS vulnerabilities
          - Path Traversal issues
          - Insecure deserialization
          - And other OWASP Top 10 issues
          
          ### ‚ö†Ô∏è Review Required
          
          - [ ] Review all code changes carefully
          - [ ] Run your test suite
          - [ ] Verify no regressions introduced
          - [ ] Check patch quality and correctness
          
          ### üì¶ Artifacts
          
          - **Patches:** See `ai-patches` artifact in [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Scan Results:** Before and after comparison available
          
          ---
          
          **Generated by:** Security Automation Platform  
          **Workflow:** ${{ github.workflow }}  
          **Run ID:** ${{ github.run_id }}
        labels: |
          security
          automated
          ai-patches
        draft: false
