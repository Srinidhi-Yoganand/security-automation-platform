{
  "timestamp": "2025-10-28T13:05:49.210594",
  "test_type": "IDOR with Improved Prompts",
  "total": 5,
  "fixed": 5,
  "partial": 0,
  "failed": 0,
  "overall_success_rate": "100.0%",
  "results": [
    {
      "name": "PHP User Profile IDOR",
      "language": "PHP",
      "status": "FIXED",
      "time": 52.9,
      "checks_passed": 5,
      "total_checks": 5,
      "success_rate": "100%",
      "vulnerable_code": "<?php\n$user_id = $_GET['id'];\n$query = \"SELECT * FROM users WHERE id = $user_id\";\n$result = mysqli_query($conn, $query);\n$user = mysqli_fetch_assoc($result);\necho $user['email'];\n?>",
      "fixed_code": "<?php\nsession_start();\n$requested_id = $_GET['id'];\n$current_user_id = $_SESSION['user_id'];\n\nif ($requested_id != $current_user_id) {\n    http_response_code(403);\n    die(\"Forbidden\");\n}\n\n$query = \"SELECT * FROM users WHERE id = ?\";\n$stmt = mysqli_prepare($conn, $query);\nmysqli_stmt_bind_param($stmt, \"i\", $current_user_id);\nmysqli_stmt_execute($stmt);\n$result = mysqli_stmt_get_result($stmt);\n$user = mysqli_fetch_assoc($result);\necho $user['email'];\n?>"
    },
    {
      "name": "Node.js Document Access IDOR",
      "language": "JavaScript",
      "status": "FIXED",
      "time": 29.5,
      "checks_passed": 5,
      "total_checks": 5,
      "success_rate": "100%",
      "vulnerable_code": "app.get('/api/documents/:id', async (req, res) => {\n    const docId = req.params.id;\n    const document = await Document.findById(docId);\n    res.json(document);\n});",
      "fixed_code": "app.get('/api/documents/:id', async (req, res) => {\n    const docId = req.params.id;\n    const userId = req.session.userId; \n    \n    const document = await Document.findOne({ _id: docId, ownerId: userId });\n    \n    if (!document) {\n        return res.status(403).json({ error: 'Forbidden' });\n    }\n    \n    res.json(document);\n});"
    },
    {
      "name": "Python Invoice IDOR",
      "language": "Python",
      "status": "FIXED",
      "time": 25.6,
      "checks_passed": 5,
      "total_checks": 5,
      "success_rate": "100%",
      "vulnerable_code": "@app.route('/invoice/<invoice_id>')\ndef view_invoice(invoice_id):\n    invoice = Invoice.query.get(invoice_id)\n    return jsonify(invoice.to_dict())",
      "fixed_code": "@app.route('/invoice/<invoice_id>')\n@login_required\ndef view_invoice(invoice_id):\n    invoice = Invoice.query.get(invoice_id)\n    \n    if invoice is None or invoice.user_id != current_user.id:\n        abort(403)\n        \n    return jsonify(invoice.to_dict())"
    },
    {
      "name": "PHP Order Access IDOR",
      "language": "PHP",
      "status": "FIXED",
      "time": 33.7,
      "checks_passed": 5,
      "total_checks": 5,
      "success_rate": "100%",
      "vulnerable_code": "<?php\n$order_id = $_POST['order_id'];\n$stmt = $pdo->prepare(\"SELECT * FROM orders WHERE id = ?\");\n$stmt->execute([$order_id]);\necho json_encode($stmt->fetch());\n?>",
      "fixed_code": "<?php\nsession_start();\n$order_id = $_POST['order_id'];\n$user_id = $_SESSION['user_id'];\n\n$stmt = $pdo->prepare(\"SELECT * FROM orders WHERE id = ? AND user_id = ?\");\n$stmt->execute([$order_id, $user_id]);\n$order = $stmt->fetch();\n\nif (!$order) {\n    http_response_code(403);\n    die(json_encode(['error' => 'Forbidden']));\n}\n\necho json<\uff5cbegin\u2581of\u2581sentence\uff5c>encode($order);\n?>"
    },
    {
      "name": "Node.js Settings Update IDOR",
      "language": "JavaScript",
      "status": "FIXED",
      "time": 33.6,
      "checks_passed": 4,
      "total_checks": 5,
      "success_rate": "80%",
      "vulnerable_code": "router.post('/users/:userId/settings', async (req, res) => {\n    await User.updateOne(\n        { _id: req.params.userId },\n        { email: req.body.email }\n    );\n    res.json({ success: true });\n});",
      "fixed_code": "router.post('/users/:userId/settings', async (req, res) => {\n    const requestedUserId = req.params.userId;\n    const currentUserId = req.session.userId;\n    \n    if (requestedUserId !== currentUserId) {\n        return res.status(403).json({ error: 'Forbidden' });\n    }\n    \n    await User.updateOne(\n        { _id: currentUserId },\n        { email: req.body.email }\n    );\n    res.json({ success: true });\n});"
    }
  ]
}